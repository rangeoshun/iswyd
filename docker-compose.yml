version: "3"
services:
  app:
    image: broadinstitute/clojure-node
    restart: always
    # stdin_open: true
    # tty: true
    volumes:
      - .:/app
      - /app/target
      - ~/.m2:/root/.m2
    working_dir: "/app/app"
    ports:
      - 3449:3449
    command: lein figwheel app lib worker player

    networks:
      - dev_net

  events_srv:
    image: clojure:lein-2.8.1
    restart: always
    hostname: events_srv
    ports:
      - 3450:3450
    volumes:
      - .:/app
      - ~/.m2:/root/.m2
    working_dir: "/app"
    entrypoint: lein monolith each :select :events do ring server-headless
    networks:
      - dev_net

  decode_srv:
    image: clojure:lein-2.8.1
    restart: always
    hostname: decode_srv
    ports:
      - 3451:3451
    volumes:
      - .:/app
      - /app/target
      - ~/.m2:/root/.m2
    working_dir: "/app"
    entrypoint: lein monolith each :select :decode do ring server-headless
    networks:
      - dev_net

  persist_srv:
    image: clojure:lein-2.8.1
    restart: always
    hostname: row_srv
    ports:
      - 3452:3452
    volumes:
      - .:/app
      - /app/target
      - ~/.m2:/root/.m2
    working_dir: "/app"
    entrypoint: lein monolith each :select :persist do ring server-headless
    networks:
      - dev_net

  sessions_srv:
    image: clojure:lein-2.8.1
    restart: always
    hostname: session_srv
    ports:
      - 3453:3453
    volumes:
      - .:/app
      - /app/target
      - ~/.m2:/root/.m2
    working_dir: "/app"
    entrypoint: lein monolith each :select :sessions do ring server-headless
    networks:
      - dev_net

  useragent_srv:
    image: clojure:lein-2.8.1
    restart: always
    hostname: session_srv
    ports:
      - 3454:3454
    volumes:
      - .:/app
      - /app/target
      - ~/.m2:/root/.m2
    working_dir: "/app"
    entrypoint: lein monolith each :select :useragent do ring server-headless
    networks:
      - dev_net

  meta_srv:
    image: clojure:lein-2.8.1
    restart: always
    hostname: meta_srv
    ports:
      - 3455:3455
    volumes:
      - .:/app
      - /app/target
      - ~/.m2:/root/.m2
    working_dir: "/app"
    entrypoint: lein monolith each :select :meta do ring server-headless
    networks:
      - dev_net

  kafka:
    image: spotify/kafka
    restart: always
    hostname: kafka
    ports:
      - 9092:9092
      - 2181:2181
    hostname: kafka
    environment:
      TOPICS: changes
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
      AUTO_CREATE_TOPICS: 'true'
    networks:
      - dev_net

  mongo:
    image: mongo:3.4
    restart: always
    hostname: mongo
    ports:
      - 27017:27017
    volumes:
      - ./data/db:/data
    command: mongod --dbpath /data
    networks:
      - dev_net

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx/dev/iswyd.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    networks:
      - dev_net

  # cadvisor:
  #   image: google/cadvisor
  #   restart: always
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 8080:8080

  # kafka_vis:
  #   image: kbhargava/kafka-visuals
  #   ports:
  #     - 8080:8080
  #   entrypoint: /opt/kafkavisualizer/file.sh zookeeper:2181 kafka:9092 DEV

networks:
  dev_net:
